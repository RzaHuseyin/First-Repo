SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DELETE FROM table_name WHERE column_name IS NULL;
        is used to return unique values in the result set.
        It filters out all duplicate values. Here, the result set lists each genre in the movies table exactly once.

=  !=   >   <    >=     <=

SELECT * FROM table-name WHERE column-name LIKE 'Se_en';     _ any (Seven, Seten, Selen)

SELECT * FROM table-name  WHERE column-name LIKE '%man%';       "a%" "%a"    "%a%"

SELECT * FROM table-name WHERE column-name BETWEEN 'A' AND 'J';

select * from table-name order by column-name desc;

select * from table-name order by column-name asc limit 5;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT COUNT(*) FROM table-name where id>15;
			~ The fastest way to calculate the number of rows in a table is to use the COUNT() function.

SELECT table-name, COUNT(*) FROM fake_apps GROUP BY table-name;  
SELECT price, COUNT(*) FROM fake_apps WHERE downloads > 20000 GROUP BY price;
        ~You can see that the result set is organized into two columns making it easy to see the number of apps at each column.

SELECT SUM(column_name) FROM table_name;  
 		~ all sum (if type with integer)

SELECT column_name2, SUM(column_name) FROM fake_apps GROUP BY column_name2;
		~
SELECT column_name1, column_name2 SUM(column_name3) FROM table_name GROUP BY column_name2;
						~Calculate the total number of column_name3 for each column_name2.

SELECT AVG(column_name) FROM table_name;
						~ returns the average number of column_name for an app in our database


SELECT column_name2, AVG(column_name1) FROM table_name GROUP BY column_name2;  
								~for column_name2   average number of column_name1

SELECT column_name2, ROUND(AVG(column_name1),2) FROM table_name GROUP BY column_name2;
							~if number is 65.684616   show 65.68

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT * FROM table_name1 WHERE table_name2_id = 3;
SELECT * FROM table_name2 WHERE id = 3;
				~~A foreign key is a column that contains the primary key of another table in the database. 
				~~We use foreign keys and primary keys to connect rows in two different tables. 

SELECT table_name1.column_name, table_name2.column_name, table_name2.column_name   FROM     table_name1,table_name2;

ELECT  * FROM  albums JOIN artists ON albums.artist_id != artists.id; 

SELECT * FROM  albums LEFT JOIN artists ON albums.artist_id = artists.id;

SELECT tablename.columnname AS 'anyname',  tablename1.year,  tablename2.name AS 'anyname'FROM  tablename1 JOIN tablename2 ON  tablename1.column1_id =  tablename2.column1_id WHERE albums.year > 1980;