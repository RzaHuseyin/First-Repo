Elaqeli verlilenlerbazasi dizaynina bir suretli-baslama dersliyi
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Giriş

Relational verilənlər bazası 1969 ilde  (IBM Araşdırma) Edgar Codd tərəfindən irəli sürülmüşdür.
Bu ildən etibarən (məsələn iyerarxik, şəbəkə və obyekt modelləri kimi digər verilənlər bazası modelləri ilə müqayisədə) kommersiya proqramları üçün dominant bazası modeline cevrilmisdir.
Bu gün Oracle, IBM DB2 və Microsoft SQL Server kimi bir çox kommersiya Relational Database Management System (RDBMS) var.
MySQL, mSQL (mini-SQL) və embedded Java DB (Apache Derby) kimi bir çox pulsuz və açıq mənbə RDBMS də var.

Bir relational verilənlər bazası cədvəllərdə (və ya oxsarinda) melumat təşkil edir.
Bir cədvəl sətir və sütunlardan meydana gəlir.
Bir sıra (row) rekord (və ya tuple) adlandırılır.
Bir sütun bir field (və ya atribut) adlanır.
Bir verilənlər bazası cədvəl bir elektron tabloya benzeyir.
Bununla beraber, cədvəllər arasında yaradıla bilinen münasibətlər səmərəli məlumatların böyük miqdarini saxlamaq və səmərəli
seçilmiş məlumat almaq üçün bir relational verilənlər bazasına imkan yaradir.
SQL (Structured Query Language) adlanan dil relational verilənlər bazası ilə işləmək üçün hazırlanmışdır.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VERILENLERBAZASI YARATMA MEQSEDI

Bir yaxşı hazırlanmış verilənlər bazası aşağıdakıları etməlidir
Melumatin çoxluğunun aradan qaldırılması:Melumatin eyni parçasi çox bir yerdə saxlanıla bilməz.
Bunun sebebi, yinelenen melumatlar yalniz bos yaddasi tutmaqla deyil hem de asnliqla uyğunsuzluqlara sebeb olur.
Melumat  bütövlüyü və dəqiqliyi təmini:
[TODO] more
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RELATIONAL VERILENLERBAZASI YARATMA PROSESI

Verilənlərbazası yaratilmasi bir çoxnuzun qərarlar verdiyi kimi  , elmden daha çox incəsənətdir.
Verilənlərbazası adətən müəyyən bir tətbiqə(app)  uyğun özəlləşdirilir.
Heçbir özəlləşdirilmiş iki tətbiq eyni deyildir ve bu səbəbdən heçbir iki verilənlərbazası eyni deyildir.
Guidelines-(adətən nə etmək əvəzinə nə etməmək müddətində) bu dizayn qərarı verməyə təqdim olundu, amma seçim nəticədə sizin üzərinizə düşür- dizayner
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
Step 1: VERİLƏNLƏRBAZASI (Tələb Analizi) MƏQSƏDİNİ MÜƏYYƏN EDİN
Tələbləri toplamaq və verilənlərbazanızın məqsədini müəyyən etmək ..............
Nümunə sadə giriş formaları, sorğular və hesabatların hazırlanması, daha çox kömək edir.
((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
Step 2: MƏLUMATLARI TOPLAMAQ, CƏSVƏLLƏRDƏ YERLƏŞDİRMƏK VƏ `PRİMARY KEY`ləri dəqiqləşdirmək.
Verilənlərbazasının məqsədinə qərar verdikdən sonra, verilənlərbazasına saxlanılmağı tələb  olunan məlumatı toplamaq.
Məlumatı mövzu-yerləşən cədvəllərdə bölmək.
Hər bir sətiri fərqli qeyd olunan primary key kimi adlanan bir sətiri( və ya çox sətirləri) seçmək.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Primary Key
Əlaqəli modeldə bir cədvəldə eyni sətirlər saxlnmaz, çünki bu axtarışda anlaşılmazlığa yaradır.
Unikallığı təmin etmək üçün hər bir cədvəldə, primary key adlandırılan ve cədvəlin bütün qeydlərini unikal(bənzərsiz) şəkildə 
müəyyən edən bir sütun (və ya sütunların qurulması) olmalıdır.
Məsələn, bir unikal müştəri-İD nömrəsi Müştəri cədvəli üçün primary key kimi istifadə oluna bilər; Məhsul cədvəli üçün məhsulKodu; Kitab cədvəli üçün isbn.
Bir primary key tək sütundadırsa  simple key adlanır; əgər bir neçə sütuna verilibsə composite key adlandırılır.
Primary key`də sürətli axtarışı və axtarışı asanaşdırmaq üçün əksəriyyət RDBMS`lər bir indeks qurur. 
Primary key həm də digər cədvəllərə müraciət etməyə istifadə olunur (sonra hazırlanacaq olan).
Siz primary key üçün istifadə edilən sütun(lar)ı qərar verirməlisiniz.
Qərar doğru olmaya bilər amma primary key`in bu xüsusiyyətləri olmalıdır:
```Primary key`in dəyərləri unikal olmalıdır (yəni, bənzəri olmayan dəyər). Məsələn, customerName müştəilərin eyni adları ola biləcəyinə görə Müştəri cədvəli
üçün primary key kimi istifadə etməyə uyğun olmaya bilər.
```Primary key həmişə dəyər almalıdır. Başqa sözlə, NULL olmamalıdır.

Primary key seçəndə aşağıdakıları nəzərdə tutmaq lazımdır:
```Primary key sadə və uyğun olmağı lazımdır, employeeİD employees cədvəli üçün və isbn kitab cədvəli üçün.
```Primary key`in dəyəri dəyişməmlidir.Primary key digər cədvəllərə istinad etmək üçün istifadə olunur. Əgər onun dəyərini dəyişsən bütün
istinadları dəyişməlisən; əks təqdirdə, istinadlar itiriləcək. Məsələn, phoneNumber`i Müştəri cədvəli üçün primary key kimi istifadə
etmək uyğun olmayacaq, çünki dəyişə bilər.
```Primary key daha çox integer (və ya number) tipi istifadə edir. Amma text kimi başqa tiblər də olab bilər. Həm də,effektivlik üçün 
primary key kimi rəqəm tipli sütundan istifadə etmək ən yaxşısıdır. 
```Primary key bir ixtiyari rəqəm ala bilər. Əksər RDBMS`lər integer primary key üçün (cari maksimum dəyər +1) yeni qeydə təyin edilən
auto-increment(və ya AutoNumber tipi)deyilən tipi dəstəkləyir. Bu ixtiyari rəqəm əslində faktiki informasiya saxlamır. Telefon nömrəsi
kimi  faktiki informasiyadan fərqli olaraq əslində primary key üçün  dəyişməyən nömrə idealdır.
```Primary key adətən bir tək sütundur (custumerİD və ya productCode). Amma bir neçə sütundan edilə bilər. Mümkün olduqca az sütun
istifadə etməliyik. 

Bir misalla təsvir edək: bir müştərilər cədvəlinin saxladığı sütunları lastName, firstName, phoneNumber, address, city, state, zipCode.
Primery key üçün  namizədlərin adıdır=(lastName, firstName), phoneNumber, Address1=(address, city, state), Address1=(address, zipCode).
Ad unikla olmaya bilər. Telefon nömrəsi və adres dəyişə bilər. Bu səbəbdən,primary key kimi customerİD deyən əslində bir auto-increment
rəqəm yaratmaq daha yaxşıdır.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Step 3:CƏDVƏLLƏR ARASINDA ƏLAQƏNİN YARADILMASI
Mütəqil və əlaqəsiz cədvəllərdən ibaərt verilənlərbazası çox az məqsədə xidmət eddir(bir elektrontablo əvəzində istifadə
etdiynizi heasb edin). Relational (bağlı) verilənlərbazasının gücü cədvəllər arasındakı əlaqənin müəyyən edilə bilinməsindədir.
Relational verilenlerbazasi yaradarkən ən önəmli aspekt cədvəllər arasında əlaqələrin müəyyən olunmasıdır. Əlaqə növlərinə daxildir:
  1.one-to-many
  2. many-to-many
  3. one-to-one
----------------------------------------------------------------------------------------------------------------------------------------
One-to-Many

`class roster` verilenlerbazsinda, bir müəllim 0 və daha çox klas öyrədə bilər,halbu ki bir sinif bir müəllim tərəfindən öyrədilir(və yalnız 1)
`company` verilenlerbazsinda bir menecer bir və daha çox işçini idarə edə bilər, bir işçi bir menecer tərəfindən idarə olunur.
`məhsul satışı` verilenlerbazsinda bir müştəri çox sifariş yerləşdirə bilər, halbu ki bir sifariş bir xüsusi müştəri tərəfindən yerləşdirilib.
Bu növ əlaqə one-to-many kimi tanınır. 
 
One-to-many əlaqəsi tək cədvəldə göstərilə bilmir.Məsələn, `class roster` verilənlərbazasında, biz Teachers adlanan 
müəllimlər haqqında məlumat saxlanılan(name, office, phone və email kimi) cədvəllə başlamalıyıq. hər müəllim tərəfindən dərs deyilən
sinifi yadaşa vermək, biz class1, class2, class3 sütunların yarada bilərik amma o an neçə sütun yaratmaq problemi ilə üzləşəcəyik.
Digər yolla, əgər Classes adlanan sinif haqqında informasiyanı bölmünü (courseCode, dayOfWeek, timeStart and timeEnd) cədvəli ilə
başlayırıqsa; biz əlavə müəllim haqqında informasiya bölmünü (name, office, phone and email kimi) saxladığmız sütunlar yarada bilərik.
Bununla belə, bir müəllim çox sinifə dərs dediyindən , onun məlumatı Classes cədvəlində çox sətirdə bənzər olacaq. 


However, since a teacher may teach many classes, its data would be duplicated in many rows in table Classes. 
 
